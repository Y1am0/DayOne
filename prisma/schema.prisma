// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  Habit         Habit[]
  Point         Point[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Habit {
  id         String     @id @default(cuid())
  userId     String     @map("user_id")
  title      String
  difficulty Difficulty
  color      String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyLogs  DailyLog[]
}

model DailyLog {
  id              String   @id @default(cuid())
  habitId         String   @map("habit_id")
  date            DateTime
  status          Status
  consecutiveDays Int?     @default(0)
  habit           Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
}

enum Difficulty {
  VERY_HARD
  HARD
  TYPICAL
}

enum Status {
  COMPLETE
  PLANNED_SKIP
  SKIPPED
}

model Point {
  id     String   @id @default(cuid())
  userId String   @map("user_id")
  points Int
  date   DateTime
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
